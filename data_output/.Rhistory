## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Seattle Aquarium long-term rockfish monitoring around Neah Bay, Washington
## multivariate analyses community structure
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "D:/OneDrive/Active_Projects/Neah_Bay/data_input"
output <- "D:/OneDrive/Active_Projects/Neah_Bay/data_output"
code <- "D:/OneDrive/Active_Projects/Neah_Bay/code"
fig <- "D:/OneDrive/Active_Projects/Neah_Bay/figures"
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("new_Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## tidy up data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## remove first column, Location
dat <- dat[-1]
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("new_Neah_Bay_data.csv", header=TRUE)
View(dat)
dat <- dat[-1]
colnames(dat)[2] <- 'Black & Deacon'
dat$Site <- gsub("^.{0,5}", "", dat$Site)
## removes empty characters (blanks spaces) from strings
dat$Site <- gsub(" ", "", dat$Site)
## function to place the last column [, ncol] in the first column position i.e. [, 1]
front.ofthe.line <- function(data){
num.col <- ncol(data)
data <- data[c(num.col, 1:num.col-1)]
return(data)
}
## create unique identifier for each combination of site / transect
## (as all sites have T1, T2, etc.)
create.key <- function(data){
data$Key <- data$Site
data$Key <- with(data, paste0(Key, Transect))
data <- front.ofthe.line(data)
return(data)
}
## remove the "19" and "20" from year dates for easier visualization, e.g., "1991" --> "91"
short.date <- function(data){
data$short.date <- gsub("20","", as.character(data$Year))
data <- front.ofthe.line(data)
return(data)
}
## create unique identifyer for data w/ multiple transects
dat <- create.key(dat)
## create a shorter year identifier, e.g., "10" instead of "2010"
dat <- short.date(dat)
## END data tidying ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("new_Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- dat[-1]
colnames(dat)[2] <- 'Black & Deacon'
dat$Site <- gsub("^.{0,5}", "", dat$Site)
View(dat)
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## Seattle Aquarium long-term rockfish monitoring around Neah Bay, Washington
## multivariate analyses community structure
## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("new_Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
View(dat)
dat <- dat[-1]
colnames(dat)[6] <- 'Black & Deacon'
View(dat)
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("new_Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- dat[-1]
colnames(dat)[5] <- 'Black & Deacon'
dat$Site <- gsub("^.{0,5}", "", dat$Site)
View(dat)
dat$Site <- gsub(" ", "", dat$Site)
front.ofthe.line <- function(data){
num.col <- ncol(data)
data <- data[c(num.col, 1:num.col-1)]
return(data)
}
create.key <- function(data){
data$Key <- data$Site
data$Key <- with(data, paste0(Key, Transect))
data <- front.ofthe.line(data)
return(data)
}
short.date <- function(data){
data$short.date <- gsub("20","", as.character(data$Year))
data <- front.ofthe.line(data)
return(data)
}
dat <- create.key(dat)
dat <- short.date(dat)
select_direction <- function(x){
out <- filter(dat, Direction %in% c(x))
return(out)
}
select_transect <- function(x){
out <- filter(dat, Transect %in% c(x))
}
dat <- select_direction("Forward")
## enter whatever combination of "T1", "T2", "T3", "T4" is desired
dat <- select_transect(c("T1", "T2", "T3", "T4"))
View(dat)
ncol_metadata <- 6
info <- dat[,1:ncol_metadata]
spp <- dat[,-(1:ncol_metadata)]
View(spp)
## check and see if any species have 0 observations
colSums(spp)
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=2))
colSums(spp)
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=8))
View(spp)
View(dat)
colSums(dat)
View(spp)
## perform multivariate analysis ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
ord <- metaMDS(comm = spp, distance="bray", k=2, min = 1000, trymax=2000,
autotransform = F, wascores = TRUE)
setwd(output)
save(ord, file = "ord_log.rda")
## work with ordination: stress, NMDS coords
setwd(output)
load("ord.rda")
## open graphics window
graphics.off()
windows(6,6,record=T)
plot(ord)
stressplot(ord)
## overlay correlation with log species
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores.csv")
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
View(ord)
View(ord.points)
save(ord, file = "ord.rda")
## work with ordination: stress, NMDS coords
setwd(output)
load("ord.rda")
graphics.off()
windows(6,6,record=T)
plot(ord)
stressplot(ord)
## overlay correlation with log species
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores.csv")
View(ord)
ord <- metaMDS(comm = spp, distance="bray", k=2, min = 1000, trymax=2000,
autotransform = F, wascores = TRUE)
setwd(output)
save(ord, file = "ord.rda")
graphics.off()
windows(6,6,record=T)
plot(ord)
stressplot(ord)
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
View(spp_scores)
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores.csv")
save.coords <- function(ord, info, spp){
t1 <- as.data.frame(scores(ord))
t2 <- cbind(t1, info, spp)
return(t2)
}
## bind nmds coordinates to dataframe with site info and spp counts
NMDS_coords <- save.coords(ord, info, spp)
View(ord.points)
## bind nmds coordinates to dataframe with site info and spp counts
NMDS_coords <- save.coords(ord.points, info, spp)
View(NMDS_coords)
## save final output as CSV files for further analysis / visualization  ~~~~~~~~
setwd(output)
write.csv(NMDS_coords,'NMDS_coords.csv')
write.csv(NMDS_coords,'NMDS_coords.csv')
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("new_Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- dat[-1]
colnames(dat)[5] <- 'Black & Deacon'
## removes "Site" from the Site column, leaving just the #
dat$Site <- gsub("^.{0,5}", "", dat$Site)
## removes empty characters (blanks spaces) from strings
dat$Site <- gsub(" ", "", dat$Site)
## function to place the last column [, ncol] in the first column position i.e. [, 1]
front.ofthe.line <- function(data){
num.col <- ncol(data)
data <- data[c(num.col, 1:num.col-1)]
return(data)
}
## create unique identifier for each combination of site / transect
## (as all sites have T1, T2, etc.)
create.key <- function(data){
data$Key <- data$Site
data$Key <- with(data, paste0(Key, Transect))
data <- front.ofthe.line(data)
return(data)
}
## remove the "19" and "20" from year dates for easier visualization, e.g., "1991" --> "91"
short.date <- function(data){
data$short.date <- gsub("20","", as.character(data$Year))
data <- front.ofthe.line(data)
return(data)
}
## create unique identifyer for data w/ multiple transects
dat <- create.key(dat)
## create a shorter year identifier, e.g., "10" instead of "2010"
dat <- short.date(dat)
## END data tidying ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## select desired data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## select either the Forward or Reverse data
## the data default to BOTH ... if you want both directions, don't run this function
select_direction <- function(x){
out <- filter(dat, Direction %in% c(x))
return(out)
}
## select the transects you desire to analyze
## the data default to ALL, i.e., T1, T2, T3, T4
select_transect <- function(x){
out <- filter(dat, Transect %in% c(x))
}
## to select only Forward data = enter F
## to select only Reverse data = enter R
## to select BOTH Forward and Reverse data ... don't run this function
dat <- select_direction("Forward")
dat <- select_transect(c("T1"))
ncol_metadata <- 6
info <- dat[,1:ncol_metadata]
spp <- dat[,-(1:ncol_metadata)]
colSums(spp)
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=2))
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=2))
colSums(spp)
ord <- metaMDS(comm = spp, distance="bray", k=2, min = 1000, trymax=2000,
autotransform = F, wascores = TRUE)
setwd(output)
save(ord, file = "ord_T1_only.rda")
graphics.off()
windows(6,6,record=T)
## plot
plot(ord)
stressplot(ord)
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores_T1_only.csv")
save.coords <- function(ord, info, spp){
t1 <- as.data.frame(scores(ord))
t2 <- cbind(t1, info, spp)
return(t2)
}
NMDS_coords <- save.coords(ord.points, info, spp)
setwd(output)
write.csv(NMDS_coords,'NMDS_coords_T1_only.csv')
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- dat[-1]
colnames(dat)[5] <- 'Black & Deacon'
## removes "Site" from the Site column, leaving just the #
dat$Site <- gsub("^.{0,5}", "", dat$Site)
## removes empty characters (blanks spaces) from strings
dat$Site <- gsub(" ", "", dat$Site)
## function to place the last column [, ncol] in the first column position i.e. [, 1]
front.ofthe.line <- function(data){
num.col <- ncol(data)
data <- data[c(num.col, 1:num.col-1)]
return(data)
}
## create unique identifier for each combination of site / transect
## (as all sites have T1, T2, etc.)
create.key <- function(data){
data$Key <- data$Site
data$Key <- with(data, paste0(Key, Transect))
data <- front.ofthe.line(data)
return(data)
}
## remove the "19" and "20" from year dates for easier visualization, e.g., "1991" --> "91"
short.date <- function(data){
data$short.date <- gsub("20","", as.character(data$Year))
data <- front.ofthe.line(data)
return(data)
}
## create unique identifyer for data w/ multiple transects
dat <- create.key(dat)
## create a shorter year identifier, e.g., "10" instead of "2010"
dat <- short.date(dat)
## END data tidying ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## select desired data ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## select either the Forward or Reverse data
## the data default to BOTH ... if you want both directions, don't run this function
select_direction <- function(x){
out <- filter(dat, Direction %in% c(x))
return(out)
}
## select the transects you desire to analyze
## the data default to ALL, i.e., T1, T2, T3, T4
select_transect <- function(x){
out <- filter(dat, Transect %in% c(x))
}
## to select only Forward data = enter F
## to select only Reverse data = enter R
## to select BOTH Forward and Reverse data ... don't run this function
dat <- select_direction("Forward")
## enter whatever combination of "T1", "T2", "T3", "T4" is desired
dat <- select_transect(c("T1", "T2", "T3", "T4"))
ncol_metadata <- 6
info <- dat[,1:ncol_metadata]
spp <- dat[,-(1:ncol_metadata)]
View(dat)
dat <- subset(dat, select = -c(YOY))
View(dat)
colSums(spp)
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=8))
colSums(spp)
dat <- subset(dat, select = -c(YOY))
ncol_metadata <- 6
info <- dat[,1:ncol_metadata]
spp <- dat[,-(1:ncol_metadata)]
colSums(spp)
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=8))
colSums(spp)
ord <- metaMDS(comm = spp, distance="bray", k=2, min = 1000, trymax=2000,
autotransform = F, wascores = TRUE)
setwd(output)
save(ord, file = "ord_no_YOY.rda")
graphics.off()
windows(6,6,record=T)
## plot
plot(ord)
stressplot(ord)
## overlay correlation with log species
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores_no_YOY.csv")
save.coords <- function(ord, info, spp){
t1 <- as.data.frame(scores(ord))
t2 <- cbind(t1, info, spp)
return(t2)
}
NMDS_coords <- save.coords(ord.points, info, spp)
setwd(output)
write.csv(NMDS_coords,'NMDS_coords_no_YOY.csv')
## startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
rm(list = ls())
library(tidyverse)
library(vegan)
## set your paths in a project folder
input <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_input"
output <- "C:/Users/randellz/Dropbox (Seattle Aquarium)/Coastal Complexity & Resilience Team Folder/GitHub/Seattle_Aquarium_Neah_Bay_subtidal_monitoring/data_output"
setwd(input)
dat <- read.csv("Neah_Bay_data.csv", header=TRUE)
## END startup ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
dat <- dat[-1]
colnames(dat)[5] <- 'Black & Deacon'
## removes "Site" from the Site column, leaving just the #
dat$Site <- gsub("^.{0,5}", "", dat$Site)
## removes empty characters (blanks spaces) from strings
dat$Site <- gsub(" ", "", dat$Site)
## function to place the last column [, ncol] in the first column position i.e. [, 1]
front.ofthe.line <- function(data){
num.col <- ncol(data)
data <- data[c(num.col, 1:num.col-1)]
return(data)
}
## create unique identifier for each combination of site / transect
## (as all sites have T1, T2, etc.)
create.key <- function(data){
data$Key <- data$Site
data$Key <- with(data, paste0(Key, Transect))
data <- front.ofthe.line(data)
return(data)
}
## remove the "19" and "20" from year dates for easier visualization, e.g., "1991" --> "91"
short.date <- function(data){
data$short.date <- gsub("20","", as.character(data$Year))
data <- front.ofthe.line(data)
return(data)
}
## create unique identifyer for data w/ multiple transects
dat <- create.key(dat)
## create a shorter year identifier, e.g., "10" instead of "2010"
dat <- short.date(dat)
## END data tidying ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
## the data default to BOTH ... if you want both directions, don't run this function
select_direction <- function(x){
out <- filter(dat, Direction %in% c(x))
return(out)
}
## select the transects you desire to analyze
## the data default to ALL, i.e., T1, T2, T3, T4
select_transect <- function(x){
out <- filter(dat, Transect %in% c(x))
}
## to select only Forward data = enter F
## to select only Reverse data = enter R
## to select BOTH Forward and Reverse data ... don't run this function
dat <- select_direction("Forward")
dat <- select_direction("Forward")
dat <- select_transect(c("T1"))
dat <- subset(dat, select = -c(YOY))
ncol_metadata <- 6
info <- dat[,1:ncol_metadata]
spp <- dat[,-(1:ncol_metadata)]
colSums(spp)
spp <- spp %>% select_if(negate(function(col) is.numeric(col) && sum(col) <=2))
colSums(spp)
ord <- metaMDS(comm = spp, distance="bray", k=2, min = 1000, trymax=2000,
autotransform = F, wascores = TRUE)
save(ord, file = "ord_T1_no_YOY.rda")
graphics.off()
windows(6,6,record=T)
## plot
plot(ord)
stressplot(ord)
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores_T1_no_YOY.csv")
save.coords <- function(ord, info, spp){
t1 <- as.data.frame(scores(ord))
t2 <- cbind(t1, info, spp)
return(t2)
}
## bind nmds coordinates to dataframe with site info and spp counts
NMDS_coords <- save.coords(ord.points, info, spp)
## save final output as CSV files for further analysis / visualization  ~~~~~~~~
setwd(output)
write.csv(NMDS_coords,'NMDS_coords_T1_no_YOY.csv')
dist <- ord$dist
ord.points <- postMDS(ord$points, dist)
spp_scores <- as.data.frame(wascores(ord.points, spp))
names(spp_scores)[1] <- "spp_x"
names(spp_scores)[2] <- "spp_y"
write.csv(spp_scores, "spp_scores_T1_no_YOY.csv")
save(ord, file = "ord_T1_no_YOY.rda")
